version: '3.4'

x-airflow-common:
  &airflow-common
  build:
    context: ./airflow/
    args:
      AIRFLOW_IMAGE: apache/airflow:2.5.3
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres_airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/log_check:/log_check
    - ./tmp/:/opt/airflow/tmp
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  depends_on:
    - postgres_airflow
    - redis
  env_file:
    - envs/database.env
  networks:
    - airflow
    - pgdb
services:
  postgres_db:
    container_name: postgres_db
    image:
      postgres:13.4-alpine
    ports:
      - "5432:5432"
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "20m"
    env_file:
      - envs/database.env
    volumes:
      - ./scripts/create_ml_user.sh:/docker-entrypoint-initdb.d/create_ml_user.sh
    restart:
      on-failure
    networks:
      - pgdb

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - 5050:80
    depends_on:
      - postgres_db
    networks:
      - pgdb

  backend:
    container_name: backend
    build:
      context: backend/
    command: bash -c "python /app/manage.py makemigrations api && python /app/manage.py migrate --noinput && python /app/manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend/:/app
    ports:
      - 8000:8000
    depends_on:
      - postgres_db
    env_file:
      - envs/database.env
      - envs/mail.env
    restart:
      on-failure
    networks:
      - pgdb
      - front_back

  ml:
    build:
      context: ml/
    depends_on:
      - postgres_db
    env_file:
      - envs/database.env
    restart:
      on-failure
    networks:
      - pgdb

  frontend:
    build:
      context: frontend/
    ports:
      - 3000:3000
    depends_on:
      - backend
    restart:
      on-failure
    networks:
      - front_back

  postgres_airflow:
    container_name: postgres_airflow
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    networks:
      - airflow

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - airflow

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

networks:
  pgdb:
  front_back:
  airflow:
    driver: bridge